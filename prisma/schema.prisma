generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    STUDENT
    LAWLITIGATORS
    ADMIN
}

enum ConsultationStatus {
    ANALYZING
    READY
    IN_PROGRESS
    COMPLETED
    FAILED
}

enum LawType {
    CONSTITUTIONAL
    CIVIL
    CRIMINAL
    FAMILY
    PROPERTY
    LABOR
    TAXATION
    CORPORATE
    CONSUMER
    OTHER
}

model User {
    id                   String    @id @default(cuid())
    email                String    @unique
    emailVerified        DateTime?
    password             String?
    name                 String
    image                String    @default("https://res.cloudinary.com/dhfuckcax/image/upload/v1739810646/krk8x7fzjukcfcoefrea.jpg")
    role                 Role      @default(USER)
    roleExplicitlyChosen Boolean   @default(false)
	createdAt            DateTime  @default(now())

    // Email verification
    verificationToken    String?   @unique
    verificationTokenExpiry DateTime?

    // Password reset
    resetToken           String?   @unique
    resetTokenExpiry     DateTime?

    accounts              Account[]
    legalConsultations    LegalConsultation[]

    @@index([email])
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model LegalConsultation {
    id                    String              @id @default(cuid())
    userId                String
    problemDescription    String              @db.Text
    legalAnalysis         Json?               // OpenAI response with legal info
    conversationTranscript String?            @db.Text
    conversationSummary   String?             @db.Text
    status                ConsultationStatus  @default(ANALYZING)
    elevenlabsSessionId   String?
    createdAt             DateTime            @default(now())
    updatedAt             DateTime            @updatedAt
    
    user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    knowledgeEntries      LegalKnowledgeEntry[]
    voiceSessions         VoiceSession[]

    @@index([userId])
    @@index([status])
}

model LegalKnowledgeEntry {
    id                String              @id @default(cuid())
    consultationId    String
    lawType           LawType
    relevantSections  Json                // Specific law sections
    legalProcedures   String?             @db.Text
    userRights        String?             @db.Text
    precedentCases    Json?               // Relevant case laws
    createdAt         DateTime            @default(now())
    
    consultation      LegalConsultation   @relation(fields: [consultationId], references: [id], onDelete: Cascade)

    @@index([consultationId])
    @@index([lawType])
}

model VoiceSession {
    id                    String              @id @default(cuid())
    consultationId        String
    elevenlabsSessionId   String
    sessionStatus         String              @default("preparing") // preparing, active, completed, failed
    audioDuration         Int?                // in seconds
    conversationQualityScore Float?
    startedAt             DateTime?
    endedAt               DateTime?
    createdAt             DateTime            @default(now())
    
    consultation          LegalConsultation   @relation(fields: [consultationId], references: [id], onDelete: Cascade)

    @@index([consultationId])
    @@index([elevenlabsSessionId])
}
